

How To Set Up MySQL Master-Master Replication

Server A: 3.3.3.3

Server B: 4.4.4.4

Step 1 - Install and Configure MySQL on Server A
sudo apt-get update
sudo apt-get install mysql-server mysql-client
sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf

By default
----------
#server-id              = 1
#log_bin                = /var/log/mysql/mysql-bin.log
#binlog_do_db           = include_database_name
bind-address            = 127.0.0.1

modfify to below
----------------
server-id               = 1
log_bin                 = /var/log/mysql/mysql-bin.log
binlog_do_db            = example
# bind-address            = 127.0.0.1

Now we need to restart mysql:
-----------------------------
sudo service mysql restart


We next need to change some command-line settings within our mysql instance. Back at our shell, we can get to our root mysql user by typing the following:


sudo mysql -u root -p 
[password --> root]

Once we are logged in, we need to run a few commands.
create user 'replicator'@'%' identified by 'password'; 
grant replication slave on *.* to 'replicator'@'%'; 
show master status; 

The output will looking similiar to the following, and will have two pieces of critical information:

+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000001 |      107 | example      |                  |
+------------------+----------+--------------+------------------+
1 row in set (0.00 sec)

Step 2 - Install and Configure MySQL on Server B
------------------------------------------------
sudo apt-get update
sudo apt-get install mysql-server mysql-client
sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf

By default
----------
#server-id              = 1
#log_bin                = /var/log/mysql/mysql-bin.log
#binlog_do_db           = include_database_name
bind-address            = 127.0.0.1

modfify to below
----------------
server-id               = 1
log_bin                 = /var/log/mysql/mysql-bin.log
binlog_do_db            = example
# bind-address            = 127.0.0.1

Now we need to restart mysql:
-----------------------------
sudo service mysql restart


We next need to change some command-line settings within our mysql instance. Back at our shell, we can get to our root mysql user by typing the following:


sudo mysql -u root -p 
[password --> root]

create user 'replicator'@'%' identified by 'password'; 

Next, we need to create the database that we are going to replicate across our VPS.

create database example; 

And we need to give our newly created ‘replication’ user permissions to replicate it.

grant replication slave on *.* to 'replicator'@'%'; 

The next step involves taking the information that we took a note of earlier and applying it to our mysql instance. This will allow replication to begin. The following should be typed at the mysql shell:

stop slave; 
CHANGE MASTER TO MASTER_HOST = '3.3.3.3', MASTER_USER = 'replicator', MASTER_PASSWORD = 'password', MASTER_LOG_FILE = 'mysql-bin.000001', MASTER_LOG_POS = 107; 
start slave; 

check status of slave using the below command
 show slave status\G

The output will look similiar to the following:

+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000004 |      107 | example      |                  |
+------------------+----------+--------------+------------------+
1 row in set (0.00 sec)
Take note of the file and position, as we will have to enter those on server C, to complete the two-way replication.

The next step will explain how to do that.

Step 3 - Completing Replication on Server A
----------------------------------------------
Back on Server C, we need to finish configuring replication on the command line. Running this command will replicate all data from Server D.

stop slave; 
CHANGE MASTER TO MASTER_HOST = '4.4.4.4', MASTER_USER = 'replicator', MASTER_PASSWORD = 'password', MASTER_LOG_FILE = 'mysql-bin.000004', MASTER_LOG_POS = 107; 
start slave; 

check status of slave using the below command
 show slave status\G

Step 4 - Testing Master-Master Replication
Now that have all the configuration set up, we are going to test it now. To do this, we are going to create a table in our example database on Server C and check on Server D to see if it shows up. Then, we are going to delete it from Server D and make sure it’s no longer showing up on Server C.

We now need to create the database that will be replicated between the servers. We can do that by typing the following at the mysql shell:

create database example; 
Once that’s done, let’s create a dummy table on Server C:

create table example.dummy (`id` varchar(10)); 
We now are going to check Server D to see if our table exists.

show tables in example; 
We should see output similiar to the following:

+-------------------+
| Tables_in_example |
+-------------------+
| dummy             |
+-------------------+
1 row in set (0.00 sec)
The last test to do is to delete our dummy table from Server D. It should also be deleted from Server C.

We can do this by entering the following on Server D:

DROP TABLE dummy; 
To confirm this, running the “show tables” command on Server C will show no tables:

Empty set (0.00 sec)

show slave hosts;



Referance link
--------------

https://www.digitalocean.com/community/tutorials/how-to-set-up-mysql-master-master-replication


SHOW MASTER STATUS; 


stop slave;
CHANGE MASTER TO MASTER_HOST = '172.31.26.27', MASTER_USER = 'replicator', MASTER_PASSWORD = 'password', MASTER_LOG_FILE = 'mysql-bin.000004', MASTER_LOG_POS = 154; 
start slave;

